// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc 22.2
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `testt.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:test.Request)
pub struct Request {
    // message fields
    // @@protoc_insertion_point(field:test.Request.Type)
    pub Type: ::protobuf::EnumOrUnknown<RequestType>,
    // message oneof groups
    pub Params: ::std::option::Option<request::Params>,
    // special fields
    // @@protoc_insertion_point(special_field:test.Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Request {
    fn default() -> &'a Request {
        <Request as ::protobuf::Message>::default_instance()
    }
}

impl Request {
    pub fn new() -> Request {
        ::std::default::Default::default()
    }

    // string First = 2;

    pub fn First(&self) -> &str {
        match self.Params {
            ::std::option::Option::Some(request::Params::First(ref v)) => v,
            _ => "",
        }
    }

    pub fn clear_First(&mut self) {
        self.Params = ::std::option::Option::None;
    }

    pub fn has_First(&self) -> bool {
        match self.Params {
            ::std::option::Option::Some(request::Params::First(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_First(&mut self, v: ::std::string::String) {
        self.Params = ::std::option::Option::Some(request::Params::First(v))
    }

    // Mutable pointer to the field.
    pub fn mut_First(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(request::Params::First(_)) = self.Params {
        } else {
            self.Params = ::std::option::Option::Some(request::Params::First(::std::string::String::new()));
        }
        match self.Params {
            ::std::option::Option::Some(request::Params::First(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_First(&mut self) -> ::std::string::String {
        if self.has_First() {
            match self.Params.take() {
                ::std::option::Option::Some(request::Params::First(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // string Second = 3;

    pub fn Second(&self) -> &str {
        match self.Params {
            ::std::option::Option::Some(request::Params::Second(ref v)) => v,
            _ => "",
        }
    }

    pub fn clear_Second(&mut self) {
        self.Params = ::std::option::Option::None;
    }

    pub fn has_Second(&self) -> bool {
        match self.Params {
            ::std::option::Option::Some(request::Params::Second(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_Second(&mut self, v: ::std::string::String) {
        self.Params = ::std::option::Option::Some(request::Params::Second(v))
    }

    // Mutable pointer to the field.
    pub fn mut_Second(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(request::Params::Second(_)) = self.Params {
        } else {
            self.Params = ::std::option::Option::Some(request::Params::Second(::std::string::String::new()));
        }
        match self.Params {
            ::std::option::Option::Some(request::Params::Second(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_Second(&mut self) -> ::std::string::String {
        if self.has_Second() {
            match self.Params.take() {
                ::std::option::Option::Some(request::Params::Second(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "Type",
            |m: &Request| { &m.Type },
            |m: &mut Request| { &mut m.Type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
            "First",
            Request::has_First,
            Request::First,
            Request::set_First,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
            "Second",
            Request::has_Second,
            Request::Second,
            Request::set_Second,
        ));
        oneofs.push(request::Params::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Request>(
            "Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Request {
    const NAME: &'static str = "Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.Type = is.read_enum_or_unknown()?;
                },
                18 => {
                    self.Params = ::std::option::Option::Some(request::Params::First(is.read_string()?));
                },
                26 => {
                    self.Params = ::std::option::Option::Some(request::Params::Second(is.read_string()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.Type != ::protobuf::EnumOrUnknown::new(RequestType::UNKONWN) {
            my_size += ::protobuf::rt::int32_size(1, self.Type.value());
        }
        if let ::std::option::Option::Some(ref v) = self.Params {
            match v {
                &request::Params::First(ref v) => {
                    my_size += ::protobuf::rt::string_size(2, &v);
                },
                &request::Params::Second(ref v) => {
                    my_size += ::protobuf::rt::string_size(3, &v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.Type != ::protobuf::EnumOrUnknown::new(RequestType::UNKONWN) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.Type))?;
        }
        if let ::std::option::Option::Some(ref v) = self.Params {
            match v {
                &request::Params::First(ref v) => {
                    os.write_string(2, v)?;
                },
                &request::Params::Second(ref v) => {
                    os.write_string(3, v)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Request {
        Request::new()
    }

    fn clear(&mut self) {
        self.Type = ::protobuf::EnumOrUnknown::new(RequestType::UNKONWN);
        self.Params = ::std::option::Option::None;
        self.Params = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Request {
        static instance: Request = Request {
            Type: ::protobuf::EnumOrUnknown::from_i32(0),
            Params: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Request`
pub mod request {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:test.Request.Params)
    pub enum Params {
        // @@protoc_insertion_point(oneof_field:test.Request.First)
        First(::std::string::String),
        // @@protoc_insertion_point(oneof_field:test.Request.Second)
        Second(::std::string::String),
    }

    impl ::protobuf::Oneof for Params {
    }

    impl ::protobuf::OneofFull for Params {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::Request as ::protobuf::MessageFull>::descriptor().oneof_by_name("Params").unwrap()).clone()
        }
    }

    impl Params {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Params>("Params")
        }
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:test.RequestType)
pub enum RequestType {
    // @@protoc_insertion_point(enum_value:test.RequestType.UNKONWN)
    UNKONWN = 0,
    // @@protoc_insertion_point(enum_value:test.RequestType.READ)
    READ = 1,
    // @@protoc_insertion_point(enum_value:test.RequestType.WRITE)
    WRITE = 2,
}

impl ::protobuf::Enum for RequestType {
    const NAME: &'static str = "RequestType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<RequestType> {
        match value {
            0 => ::std::option::Option::Some(RequestType::UNKONWN),
            1 => ::std::option::Option::Some(RequestType::READ),
            2 => ::std::option::Option::Some(RequestType::WRITE),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [RequestType] = &[
        RequestType::UNKONWN,
        RequestType::READ,
        RequestType::WRITE,
    ];
}

impl ::protobuf::EnumFull for RequestType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("RequestType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for RequestType {
    fn default() -> Self {
        RequestType::UNKONWN
    }
}

impl RequestType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<RequestType>("RequestType")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0btestt.proto\x12\x04test\"l\n\x07Request\x12%\n\x04Type\x18\x01\x20\
    \x01(\x0e2\x11.test.RequestTypeR\x04Type\x12\x16\n\x05First\x18\x02\x20\
    \x01(\tH\0R\x05First\x12\x18\n\x06Second\x18\x03\x20\x01(\tH\0R\x06Secon\
    dB\x08\n\x06Params*/\n\x0bRequestType\x12\x0b\n\x07UNKONWN\x10\0\x12\x08\
    \n\x04READ\x10\x01\x12\t\n\x05WRITE\x10\x02B\x08Z\x06proto/b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(Request::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(RequestType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
